name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

concurrency:
  group: cmake-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    env:
      CC: ${{matrix.compiler}}
    strategy:
      fail-fast: false
      matrix:
        name: [noname]
        os: [ubuntu-latest, macos-latest]
        compiler: [clang, gcc]
        BUILD_TYPE: [Release, Debug]
        TOYWASM_USE_SEPARATE_EXECUTE: [ON, OFF]
        TOYWASM_USE_TAILCALL: [ON, OFF]
        TOYWASM_ENABLE_TRACING: [ON, OFF]
        TOYWASM_USE_SMALL_CELLS: [ON, OFF]
        TOYWASM_USE_SEPARATE_LOCALS: [ON, OFF]
        MISC_FEATURES: [ON, OFF]
        TOYWASM_ENABLE_WASM_THREADS: [ON, OFF]
        TOYWASM_ENABLE_WASI_THREADS: [ON, OFF]
        exclude:
          # I haven't used gcc for macos
          - os: macos-latest
            compiler: gcc
          # tailcall doesn't make sense w/o separate execute
          - TOYWASM_USE_SEPARATE_EXECUTE: OFF
            TOYWASM_USE_TAILCALL: ON
          # I don't remeber why i excluded this.
          # Probably because it's testet in wasm-on-wasm jobs?
          - TOYWASM_USE_SEPARATE_EXECUTE: ON
            TOYWASM_USE_TAILCALL: OFF
          # wasi-threads requires wasm threads
          - TOYWASM_ENABLE_WASM_THREADS: OFF
            TOYWASM_ENABLE_WASI_THREADS: ON
          # Exclude some non default configs with threads
          - TOYWASM_USE_SEPARATE_EXECUTE: OFF
            TOYWASM_ENABLE_WASM_THREADS: ON
          - TOYWASM_USE_TAILCALL: OFF
            TOYWASM_ENABLE_WASM_THREADS: ON
          - TOYWASM_USE_SMALL_CELLS: OFF
            TOYWASM_ENABLE_WASM_THREADS: ON
          # exclude some more combinations to reduce the matrix
          - TOYWASM_USE_SMALL_CELLS: ON
            TOYWASM_USE_SEPARATE_LOCALS: ON
          - os: ubuntu-latest
            compiler: clang
          - os: ubuntu-latest
            BUILD_TYPE: Release
        include:
          - name: ubuntu
            os: ubuntu-latest
            compiler: clang
            BUILD_TYPE: Release
            TOYWASM_USE_SEPARATE_EXECUTE: ON
            TOYWASM_USE_TAILCALL: ON
            TOYWASM_ENABLE_TRACING: OFF
            TOYWASM_USE_SMALL_CELLS: ON
            TOYWASM_USE_SEPARATE_LOCALS: ON
            MISC_FEATURES: OFF
            TOYWASM_ENABLE_WASM_THREADS: OFF
            TOYWASM_ENABLE_WASI_THREADS: OFF
          - name: macos
            os: macos
            compiler: clang
            BUILD_TYPE: Release
            TOYWASM_USE_SEPARATE_EXECUTE: ON
            TOYWASM_USE_TAILCALL: ON
            TOYWASM_ENABLE_TRACING: OFF
            TOYWASM_USE_SMALL_CELLS: ON
            TOYWASM_USE_SEPARATE_LOCALS: ON
            MISC_FEATURES: OFF
            TOYWASM_ENABLE_WASM_THREADS: OFF
            TOYWASM_ENABLE_WASI_THREADS: OFF

    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{matrix.os}}

    steps:
    - name: Install dependencies (ubuntu)
      if: startsWith(matrix.os, 'ubuntu-')
      run: sudo apt-get update && sudo apt-get install -y wabt libcmocka-dev clang lld llvm-dev pax virtualenv

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install wabt
        brew install cmocka
        brew install virtualenv

    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} \
          -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/dist \
          -DTOYWASM_USE_SEPARATE_EXECUTE=${{matrix.TOYWASM_USE_SEPARATE_EXECUTE}} \
          -DTOYWASM_USE_TAILCALL=${{matrix.TOYWASM_USE_TAILCALL}} \
          -DTOYWASM_ENABLE_TRACING=${{matrix.TOYWASM_ENABLE_TRACING}} \
          -DTOYWASM_ENABLE_TRACING_INSN=${{matrix.TOYWASM_ENABLE_TRACING}} \
          -DTOYWASM_USE_SMALL_CELLS=${{matrix.TOYWASM_USE_SMALL_CELLS}} \
          -DTOYWASM_USE_SEPARATE_LOCALS=${{matrix.TOYWASM_USE_SEPARATE_LOCALS}} \
          -DTOYWASM_ENABLE_WASM_EXTENDED_CONST=${{matrix.MISC_FEATURES}} \
          -DTOYWASM_ENABLE_WASM_MULTI_MEMORY=${{matrix.MISC_FEATURES}} \
          -DTOYWASM_ENABLE_WASM_TAILCALL=${{matrix.MISC_FEATURES}} \
          -DTOYWASM_ENABLE_WASM_THREADS=${{matrix.TOYWASM_ENABLE_WASM_THREADS}} \
          -DTOYWASM_ENABLE_WASI_THREADS=${{matrix.TOYWASM_ENABLE_WASI_THREADS}}
        cmake -B ${{github.workspace}}/build -L

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        ./toywasm --version
        ctest -C ${{matrix.BUILD_TYPE}} -V -LE slow

    - name: Test (slow)
      if: matrix.BUILD_TYPE == 'Release'
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        ./toywasm --version
        ctest -C ${{matrix.BUILD_TYPE}} -V -L slow

    - name: Install
      run: |
        cmake --build ${{github.workspace}}/build --target install

    - name: Tar
      run: |
        mkdir -p ${{github.workspace}}/artifacts
        cd ${{github.workspace}}/dist
        pax -wvzf ${{github.workspace}}/artifacts/toywasm-${{matrix.name}}.tgz *

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{matrix.name}}
        path: ${{github.workspace}}/artifacts

  wasm-on-wasm:
    env:
      CC: ${{matrix.compiler}}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-12]
        compiler: [clang]

    runs-on: ${{matrix.os}}

    steps:
    - name: Install dependencies (ubuntu)
      if: startsWith(matrix.os, 'ubuntu-')
      run: sudo apt-get update && sudo apt-get install -y pax

    - uses: actions/checkout@v3

    - name: Build and test
      env:
        EXTRA_CMAKE_OPTIONS: -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/dist
      run: ./wasm-on-wasm.sh

    - name: Install
      run: |
        cmake --build build.wasm --target install

    - name: Tar
      run: |
        mkdir -p ${{github.workspace}}/artifacts
        cd ${{github.workspace}}/dist
        pax -wvzf ${{github.workspace}}/artifacts/toywasm-wasm-wasi.tgz *

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wasm32-wasi
        path: ${{github.workspace}}/artifacts

  cross:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        compiler: [clang]
        arch: [arm64, s390x, armhf]

    runs-on: ${{matrix.os}}

    steps:
    - name: Install dependencies (ubuntu)
      if: startsWith(matrix.os, 'ubuntu-')
      run: sudo apt-get update && sudo apt-get install -y pax virtualenv

    - uses: actions/checkout@v3

    - name: Fix sources.list
      run: |
        curl -L -O https://raw.githubusercontent.com/yamt/garbage/master/myubuntu/apt/sources.list
        sudo cp sources.list /etc/apt/

    - name: Cross build
      env:
        ARCH: ${{matrix.arch}}
        EXTRA_CMAKE_OPTIONS: -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/dist
      run: |
        sudo -E ./cross/cross-setup.sh
        ./cross/cross-build.sh

    - name: Install QEMU
      run: |
        sudo apt-get update && sudo apt-get install -y qemu-user-static

    - name: Run
      env:
        ARCH: ${{matrix.arch}}
      run: |
        cd build.cross.${ARCH}
        ./toywasm --version
        ctest -V -LE slow

    - name: Run (slow)
      # skip for s390x as it's slow
      if: matrix.arch != 's390x'
      env:
        ARCH: ${{matrix.arch}}
      run: |
        cd build.cross.${ARCH}
        ./toywasm --version
        ctest -V -L slow

    - name: Install
      run: |
        cmake --build build.wasm --target install

    - name: Tar
      run: |
        mkdir -p ${{github.workspace}}/artifacts
        cd ${{github.workspace}}/dist
        pax -wvzf ${{github.workspace}}/artifacts/toywasm-${{matrix.os}}-${{matrix.arch}}.tgz *

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{matrix.os}}-${{matrix.arch}}
        path: ${{github.workspace}}/artifacts
